/**
***  Copyright (c) 1995, 1996, 1997, 1998, 1999, 2000 by
***  The Board of Trustees of the University of Illinois.
***  All rights reserved.
**/

#include "InfoStream.h"
#include "ComputeCrossterms.h"
#include "Molecule.h"
#include "Parameters.h"
#include "Node.h"
#include "ReductionMgr.h"
#include "Lattice.h"
#include "PressureProfile.h"
#include "Debug.h"

#if 0
void CrosstermElem::loadTuplesForAtom
  (void *voidlist, AtomID atomID, Molecule *molecule)
{
      DebugM(1, "::loadTuplesForAtom - atomID " << atomID << endl );
      UniqueSet<CrosstermElem> &crosstermList =
                  *( (UniqueSet<CrosstermElem>*) voidlist );

      DebugM(1, "::loadTuplesForAtom - current list size " << crosstermList.size() << endl );

      /* get list of all crossterms for the atom */
      int *crossterms = molecule->get_crossterms_for_atom(atomID);
      DebugM(1, "::loadTuplesForAtom - atomID " << atomID << endl );

      /* cycle through each crossterm */
      int crosstermNum = *crossterms;
      while(crosstermNum != -1)
      {
        /* store crossterm in the list */
        DebugM(1, "::loadTuplesForAtom - loading crossterm " << crosstermNum << endl );
        crosstermList.add(CrosstermElem(molecule->get_crossterm(crosstermNum)));
        crosstermNum = *(++crossterms);
      }
}
#endif

// static initialization
int CrosstermElem::pressureProfileSlabs = 0;
BigReal CrosstermElem::pressureProfileThickness = 0;
BigReal CrosstermElem::pressureProfileMin = 0;

void CrosstermElem::getMoleculePointers
    (Molecule* mol, int* count, int32*** byatom, Crossterm** structarray)
{
  *count = mol->numCrossterms;
  *byatom = mol->crosstermsByAtom;
  *structarray = mol->crossterms;
}

void CrosstermElem::getParameterPointers(Parameters *p, const CrosstermValue **v) {
  *v = p->crossterm_array;
}

void CrosstermElem::computeForce(BigReal *reduction,
                                BigReal *pressureProfileData)
{
  DebugM(3, "::computeForce() localIndex = " << localIndex[0] << " "
               << localIndex[1] << " " << localIndex[2] << " " <<
	       localIndex[3] << endl);

  // Vector r12, r23, r34;	// vector between atoms
  Vector A,B,C,D,E,F;		// cross products
  BigReal rA,rB,rC,rD,rE,rF;	// length of vectors
  BigReal energy=0;	// energy from the angle
  BigReal phi,psi;		// angle between the plans
  double cos_phi,cos_psi;	// cos(phi)
  double sin_phi,sin_psi;	// sin(phi)
  Vector dcosdA,dcosdD;	// Derivative d(cos(phi))/dA
  Vector dcosdB,dcosdE;	// Derivative d(cos(phi))/dB
  Vector dsindC,dsindF;	// Derivative d(sin(phi))/dC
  Vector dsindB,dsindE;	// Derivative d(sin(phi))/dB
  BigReal U,U_phi,U_psi;	// energy constants
  BigReal diff;		// for periodicity
  Force f1(0,0,0),f2(0,0,0),f3(0,0,0);	// force components
  Force f4(0,0,0),f5(0,0,0),f6(0,0,0);	// force components

  DebugM(3, "::computeForce() -- starting with crossterm type " << crosstermType << endl);

  //  Calculate the vectors between atoms
  const Position & pos0 = p[0]->x[localIndex[0]].position;
  const Position & pos1 = p[1]->x[localIndex[1]].position;
  const Position & pos2 = p[2]->x[localIndex[2]].position;
  const Position & pos3 = p[3]->x[localIndex[3]].position;
  const Position & pos4 = p[4]->x[localIndex[4]].position;
  const Position & pos5 = p[5]->x[localIndex[5]].position;
  const Position & pos6 = p[6]->x[localIndex[6]].position;
  const Position & pos7 = p[7]->x[localIndex[7]].position;
  const Lattice & lattice = p[0]->p->lattice;
  const Vector r12 = lattice.delta(pos0,pos1);
  const Vector r23 = lattice.delta(pos1,pos2);
  const Vector r34 = lattice.delta(pos2,pos3);
  const Vector r56 = lattice.delta(pos4,pos5);
  const Vector r67 = lattice.delta(pos5,pos6);
  const Vector r78 = lattice.delta(pos6,pos7);

  //  Calculate the cross products
  A = cross(r12,r23);
  B = cross(r23,r34);
  C = cross(r23,A);
  D = cross(r56,r67);
  E = cross(r67,r78);
  F = cross(r67,D);

  //  Calculate the distances
  rA = A.length();
  rB = B.length();
  rC = C.length();
  rD = D.length();
  rE = E.length();
  rF = F.length();

  //  Calculate the sin and cos
  cos_phi = A*B/(rA*rB);
  sin_phi = C*B/(rC*rB);
  cos_psi = D*E/(rD*rE);
  sin_psi = F*E/(rF*rE);

  //  Normalize B
  rB = 1.0/rB;
  B *= rB;
  rE = 1.0/rE;
  E *= rE;

  phi= -atan2(sin_phi,cos_phi);
  psi= -atan2(sin_psi,cos_psi);

  if (fabs(sin_phi) > 0.1) {
    //  Normalize A
    rA = 1.0/rA;
    A *= rA;
    dcosdA = rA*(cos_phi*A-B);
    dcosdB = rB*(cos_phi*B-A);
  } else {
    //  Normalize C
    rC = 1.0/rC;
    C *= rC;
    dsindC = rC*(sin_phi*C-B);
    dsindB = rB*(sin_phi*B-C);
  }

  if (fabs(sin_psi) > 0.1) {
    //  Normalize A
    rD = 1.0/rD;
    D *= rD;
    dcosdD = rD*(cos_phi*D-E);
    dcosdE = rE*(cos_phi*E-D);
  } else {
    //  Normalize C
    rF = 1.0/rF;
    F *= rF;
    dsindF = rF*(sin_phi*F-E);
    dsindE = rE*(sin_phi*E-F);
  }

CkPrintf("crossterm %d-%d-%d-%d %d-%d-%d-%d %lf %lf\n",
    atomID[0], atomID[1], atomID[2], atomID[3],
    atomID[4], atomID[5], atomID[6], atomID[7],
    phi, psi);

/*
    int n = value->values[mult_num].n;
*/
    Real k = 0;
    Real delta = 0;
    int n = 0;

    //  Calculate the energy
    if (n)
    {
      //  Periodicity is greater than 0, so use cos form
      U = k*(1+cos(n*phi - delta));
      U_phi = -n*k*sin(n*phi - delta);
    }
    else
    {
      //  Periodicity is 0, so just use the harmonic form
      diff = phi-delta;
      if (diff < -PI)           diff += TWOPI;
      else if (diff > PI)       diff -= TWOPI;

      U = k*diff*diff;
      U_phi = 2.0*k*diff;
    }

    U_psi = 0;

    //  Add the energy from this crossterm to the total energy
    energy += U;

    //  Next, we want to calculate the forces.  In order
    //  to do that, we first need to figure out whether the
    //  sin or cos form will be more stable.  For this,
    //  just look at the value of phi
    if (fabs(sin_phi) > 0.1)
    {
      //  use the sin version to avoid 1/cos terms
      U_phi = U_phi/sin_phi;

      f1.x += U_phi*(r23.y*dcosdA.z - r23.z*dcosdA.y);
      f1.y += U_phi*(r23.z*dcosdA.x - r23.x*dcosdA.z);
      f1.z += U_phi*(r23.x*dcosdA.y - r23.y*dcosdA.x);

      f3.x += U_phi*(r23.z*dcosdB.y - r23.y*dcosdB.z);
      f3.y += U_phi*(r23.x*dcosdB.z - r23.z*dcosdB.x);
      f3.z += U_phi*(r23.y*dcosdB.x - r23.x*dcosdB.y);

      f2.x += U_phi*(r12.z*dcosdA.y - r12.y*dcosdA.z
               + r34.y*dcosdB.z - r34.z*dcosdB.y);
      f2.y += U_phi*(r12.x*dcosdA.z - r12.z*dcosdA.x
               + r34.z*dcosdB.x - r34.x*dcosdB.z);
      f2.z += U_phi*(r12.y*dcosdA.x - r12.x*dcosdA.y
             + r34.x*dcosdB.y - r34.y*dcosdB.x);
    }
    else
    {
      //  This angle is closer to 0 or 180 than it is to
      //  90, so use the cos version to avoid 1/sin terms
      U_phi = -U_phi/cos_phi;

      f1.x += U_phi*((r23.y*r23.y + r23.z*r23.z)*dsindC.x
                - r23.x*r23.y*dsindC.y
                - r23.x*r23.z*dsindC.z);
      f1.y += U_phi*((r23.z*r23.z + r23.x*r23.x)*dsindC.y
                - r23.y*r23.z*dsindC.z
                - r23.y*r23.x*dsindC.x);
      f1.z += U_phi*((r23.x*r23.x + r23.y*r23.y)*dsindC.z
                - r23.z*r23.x*dsindC.x
                - r23.z*r23.y*dsindC.y);

      f3 += cross(U_phi,dsindB,r23);

      f2.x += U_phi*(-(r23.y*r12.y + r23.z*r12.z)*dsindC.x
             +(2.0*r23.x*r12.y - r12.x*r23.y)*dsindC.y
             +(2.0*r23.x*r12.z - r12.x*r23.z)*dsindC.z
             +dsindB.z*r34.y - dsindB.y*r34.z);
      f2.y += U_phi*(-(r23.z*r12.z + r23.x*r12.x)*dsindC.y
             +(2.0*r23.y*r12.z - r12.y*r23.z)*dsindC.z
             +(2.0*r23.y*r12.x - r12.y*r23.x)*dsindC.x
             +dsindB.x*r34.z - dsindB.z*r34.x);
      f2.z += U_phi*(-(r23.x*r12.x + r23.y*r12.y)*dsindC.z
             +(2.0*r23.z*r12.x - r12.z*r23.x)*dsindC.x
             +(2.0*r23.z*r12.y - r12.z*r23.y)*dsindC.y
             +dsindB.y*r34.x - dsindB.x*r34.y);
    }

    if (fabs(sin_psi) > 0.1)
    {
      //  use the sin version to avoid 1/cos terms
      U_psi = U_psi/sin_psi;

      f4.x += U_psi*(r67.y*dcosdD.z - r67.z*dcosdD.y);
      f4.y += U_psi*(r67.z*dcosdD.x - r67.x*dcosdD.z);
      f4.z += U_psi*(r67.x*dcosdD.y - r67.y*dcosdD.x);

      f6.x += U_psi*(r67.z*dcosdE.y - r67.y*dcosdE.z);
      f6.y += U_psi*(r67.x*dcosdE.z - r67.z*dcosdE.x);
      f6.z += U_psi*(r67.y*dcosdE.x - r67.x*dcosdE.y);

      f5.x += U_psi*(r56.z*dcosdD.y - r56.y*dcosdD.z
               + r78.y*dcosdE.z - r78.z*dcosdE.y);
      f5.y += U_psi*(r56.x*dcosdD.z - r56.z*dcosdD.x
               + r78.z*dcosdE.x - r78.x*dcosdE.z);
      f5.z += U_psi*(r56.y*dcosdD.x - r56.x*dcosdD.y
             + r78.x*dcosdE.y - r78.y*dcosdE.x);
    }
    else
    {
      //  This angle is closer to 0 or 180 than it is to
      //  90, so use the cos version to avoid 1/sin terms
      U_psi = -U_psi/cos_psi;

      f4.x += U_psi*((r67.y*r67.y + r67.z*r67.z)*dsindF.x
                - r67.x*r67.y*dsindF.y
                - r67.x*r67.z*dsindF.z);
      f4.y += U_psi*((r67.z*r67.z + r67.x*r67.x)*dsindF.y
                - r67.y*r67.z*dsindF.z
                - r67.y*r67.x*dsindF.x);
      f4.z += U_psi*((r67.x*r67.x + r67.y*r67.y)*dsindF.z
                - r67.z*r67.x*dsindF.x
                - r67.z*r67.y*dsindF.y);

      f6 += cross(U_psi,dsindE,r67);

      f5.x += U_psi*(-(r67.y*r56.y + r67.z*r56.z)*dsindF.x
             +(2.0*r67.x*r56.y - r56.x*r67.y)*dsindF.y
             +(2.0*r67.x*r56.z - r56.x*r67.z)*dsindF.z
             +dsindE.z*r78.y - dsindE.y*r78.z);
      f5.y += U_psi*(-(r67.z*r56.z + r67.x*r56.x)*dsindF.y
             +(2.0*r67.y*r56.z - r56.y*r67.z)*dsindF.z
             +(2.0*r67.y*r56.x - r56.y*r67.x)*dsindF.x
             +dsindE.x*r78.z - dsindE.z*r78.x);
      f5.z += U_psi*(-(r67.x*r56.x + r67.y*r56.y)*dsindF.z
             +(2.0*r67.z*r56.x - r56.z*r67.x)*dsindF.x
             +(2.0*r67.z*r56.y - r56.z*r67.y)*dsindF.y
             +dsindE.y*r78.x - dsindE.x*r78.y);
    }

  /* store the forces */
  p[0]->f[localIndex[0]] += f1;
  p[1]->f[localIndex[1]] += f2 - f1;
  p[2]->f[localIndex[2]] += f3 - f2;
  p[3]->f[localIndex[3]] += -f3;
  p[4]->f[localIndex[4]] += f4;
  p[5]->f[localIndex[5]] += f5 - f4;
  p[6]->f[localIndex[6]] += f6 - f5;
  p[7]->f[localIndex[7]] += -f6;

  DebugM(3, "::computeForce() -- ending with delta energy " << energy << endl);
  reduction[crosstermEnergyIndex] += energy;
  reduction[virialIndex_XX] += ( f1.x * r12.x + f2.x * r23.x + f3.x * r34.x );
  reduction[virialIndex_XY] += ( f1.x * r12.y + f2.x * r23.y + f3.x * r34.y );
  reduction[virialIndex_XZ] += ( f1.x * r12.z + f2.x * r23.z + f3.x * r34.z );
  reduction[virialIndex_YX] += ( f1.y * r12.x + f2.y * r23.x + f3.y * r34.x );
  reduction[virialIndex_YY] += ( f1.y * r12.y + f2.y * r23.y + f3.y * r34.y );
  reduction[virialIndex_YZ] += ( f1.y * r12.z + f2.y * r23.z + f3.y * r34.z );
  reduction[virialIndex_ZX] += ( f1.z * r12.x + f2.z * r23.x + f3.z * r34.x );
  reduction[virialIndex_ZY] += ( f1.z * r12.y + f2.z * r23.y + f3.z * r34.y );
  reduction[virialIndex_ZZ] += ( f1.z * r12.z + f2.z * r23.z + f3.z * r34.z );

  reduction[virialIndex_XX] += ( f4.x * r56.x + f5.x * r67.x + f6.x * r78.x );
  reduction[virialIndex_XY] += ( f4.x * r56.y + f5.x * r67.y + f6.x * r78.y );
  reduction[virialIndex_XZ] += ( f4.x * r56.z + f5.x * r67.z + f6.x * r78.z );
  reduction[virialIndex_YX] += ( f4.y * r56.x + f5.y * r67.x + f6.y * r78.x );
  reduction[virialIndex_YY] += ( f4.y * r56.y + f5.y * r67.y + f6.y * r78.y );
  reduction[virialIndex_YZ] += ( f4.y * r56.z + f5.y * r67.z + f6.y * r78.z );
  reduction[virialIndex_ZX] += ( f4.z * r56.x + f5.z * r67.x + f6.z * r78.x );
  reduction[virialIndex_ZY] += ( f4.z * r56.y + f5.z * r67.y + f6.z * r78.y );
  reduction[virialIndex_ZZ] += ( f4.z * r56.z + f5.z * r67.z + f6.z * r78.z );

  if (pressureProfileData) {
    BigReal z1 = p[0]->x[localIndex[0]].position.z;
    BigReal z2 = p[1]->x[localIndex[1]].position.z;
    BigReal z3 = p[2]->x[localIndex[2]].position.z;
    BigReal z4 = p[3]->x[localIndex[3]].position.z;
    BigReal z5 = p[4]->x[localIndex[4]].position.z;
    BigReal z6 = p[5]->x[localIndex[5]].position.z;
    BigReal z7 = p[6]->x[localIndex[6]].position.z;
    BigReal z8 = p[7]->x[localIndex[7]].position.z;
    int n1 = (int)floor((z1-pressureProfileMin)/pressureProfileThickness);
    int n2 = (int)floor((z2-pressureProfileMin)/pressureProfileThickness);
    int n3 = (int)floor((z3-pressureProfileMin)/pressureProfileThickness);
    int n4 = (int)floor((z4-pressureProfileMin)/pressureProfileThickness);
    int n5 = (int)floor((z5-pressureProfileMin)/pressureProfileThickness);
    int n6 = (int)floor((z6-pressureProfileMin)/pressureProfileThickness);
    int n7 = (int)floor((z7-pressureProfileMin)/pressureProfileThickness);
    int n8 = (int)floor((z8-pressureProfileMin)/pressureProfileThickness);
    pp_reduction(pressureProfileThickness, pressureProfileMin,
                pressureProfileSlabs, z1, z2, n1, n2,
                f1.x * r12.x, f1.y * r12.y, f1.z * r12.z,
                pressureProfileData);
    pp_reduction(pressureProfileThickness, pressureProfileMin,
                pressureProfileSlabs, z2, z3, n2, n3,
                f2.x * r23.x, f2.y * r23.y, f2.z * r23.z,
                pressureProfileData);
    pp_reduction(pressureProfileThickness, pressureProfileMin,
                pressureProfileSlabs, z3, z4, n3, n4,
                f3.x * r34.x, f3.y * r34.y, f3.z * r34.z,
                pressureProfileData);
    pp_reduction(pressureProfileThickness, pressureProfileMin,
                pressureProfileSlabs, z5, z6, n5, n6,
                f4.x * r56.x, f4.y * r56.y, f4.z * r56.z,
                pressureProfileData);
    pp_reduction(pressureProfileThickness, pressureProfileMin,
                pressureProfileSlabs, z6, z7, n6, n7,
                f5.x * r67.x, f5.y * r67.y, f5.z * r67.z,
                pressureProfileData);
    pp_reduction(pressureProfileThickness, pressureProfileMin,
                pressureProfileSlabs, z7, z8, n7, n8,
                f6.x * r78.x, f6.y * r78.y, f6.z * r78.z,
                pressureProfileData);
  }
}

void CrosstermElem::submitReductionData(BigReal *data, SubmitReduction *reduction)
{
  reduction->item(REDUCTION_CROSSTERM_ENERGY) += data[crosstermEnergyIndex];
  ADD_TENSOR(reduction,REDUCTION_VIRIAL_NORMAL,data,virialIndex);
}

