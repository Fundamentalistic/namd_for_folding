//-*-c++-*-
/***************************************************************************/
/*              (C) Copyright 1996,1997 The Board of Trustees of the       */
/*                          University of Illinois                         */
/*                           All Rights Reserved                           */
/***************************************************************************/
/***************************************************************************
 * DESCRIPTION: Coordinates broadcast of a data type from a Controller/Seq
 *		to all other Controller/Sequencer type objects (they must
 *		run in a thread!)
 ***************************************************************************/

#include "charm++.h"
#include "main.h"
#include "UniqueSet.h"
#include "UniqueSetIter.h"
#include "ProcessorPrivate.h"
#include "BroadcastMgr.decl.h"

#ifndef _BCASTMGR_H
#define _BCASTMGR_H

class BroadcastMsg : public CMessage_BroadcastMsg {
friend class BroadcastMgr;
public:
  ~BroadcastMsg() { }
  BroadcastMsg() { msg = 0; }

  // pack and unpack functions
  static void* pack(BroadcastMsg *ptr) {
    int length = ptr->size + 4*sizeof(int);
    char *buffer;
    char *b = buffer = (char *)CkAllocBuffer(ptr, length);
    memcpy(b, (void *)&(ptr->size), sizeof(int)); b += sizeof(int);
    memcpy(b, (void *)&(ptr->id), sizeof(int)); b += sizeof(int);
    memcpy(b, (void *)&(ptr->tag), sizeof(int)); b += sizeof(int);
    memcpy(b, (void *)&(ptr->node), sizeof(int)); b += sizeof(int);
    memcpy(b, ptr->msg, ptr->size); b += ptr->size;
    delete[] (char *)ptr->msg;
    delete ptr;
    return buffer;
  }
    
  static BroadcastMsg* unpack(void *ptr) {
    void *_ptr = CkAllocBuffer(ptr, sizeof(BroadcastMsg));
    BroadcastMsg *m = new (ptr) BroadcastMsg;
    char *b = (char *)ptr;
    memcpy((void *)&(m->size), b, sizeof(int)); b += sizeof(int);
    memcpy((void *)&(m->id), b, sizeof(int)); b += sizeof(int);
    memcpy((void *)&(m->tag), b, sizeof(int)); b += sizeof(int);
    memcpy((void *)&(m->node), b, sizeof(int)); b += sizeof(int);
    m->msg = (void *)new char[m->size];
    memcpy((void *)m->msg, b, m->size); b += m->size;
    CkFreeMsg(ptr);
    return m;
  }

private:
  // Only seen by BroadcastMgr
  void *msg;
  int size;
  int id;
  int tag;
  int node;
};

class BroadcastClient;

class BroadcastClientElem {
public:
  BroadcastClientElem() {}
  BroadcastClientElem(BroadcastClient * c) : broadcastClient(c) {}
  ~BroadcastClientElem() {}

  BroadcastClient *broadcastClient;

  size_t hash() const { return (size_t)broadcastClient; }
  int operator==(const BroadcastClientElem &b) const { 
    return broadcastClient == b.broadcastClient; 
  }
};

class TaggedMsg {
public:
  TaggedMsg() {}
  TaggedMsg(int t) : tag(t) {}
  TaggedMsg(int t, int s, int c, void *m) 
    : tag(t), counter(c), msg(m), msgSize(s) {}
  ~TaggedMsg() {}

  int tag;
  int counter;
  void *msg;
  int msgSize;

  int hash() const { return tag; }
  int operator==(const TaggedMsg &tm) const { return(tag == tm.tag); }
};

class BOID {
public:
  BOID() {}
  BOID(int id) { this->id = id; }
  ~BOID() {}

  int hash() const { return id; }
  int operator==(const BOID &b) const { return id == b.id; }
  int id;

  UniqueSet<BroadcastClientElem> *broadcastSet;
  UniqueSet<TaggedMsg> *taggedMsg;
};

class BroadcastMgr : public BOCclass
{
public:
  BroadcastMgr() { 
    CpvAccess(BroadcastMgr_instance) = this; 
  }
  ~BroadcastMgr(void);
	  
  // Singleton Access method
  inline static BroadcastMgr *Object() {
    return CpvAccess(BroadcastMgr_instance);
  }

  void *getbuf(BroadcastClient &b, int tag);
  void send(BroadcastClient &b, int tag, void *buf, size_t);
  void subscribe(BroadcastClient &bc);
  void unsubscribe(BroadcastClient &bc);
  void recvBroadcast(BroadcastMsg *msg);

private:
  UniqueSet<BOID> boid;
};

#endif /* _BCASTMGR_H */
/***************************************************************************
 * RCS INFORMATION:
 *
 *	$RCSfile $
 *	$Author $	$Locker:  $		$State: Exp $
 *	$Revision: 1.10 $	$Date: 1999/05/11 23:56:13 $
 *
 ***************************************************************************
 * REVISION HISTORY:
 *
 * $Log: BroadcastMgr.h,v $
 * Revision 1.10  1999/05/11 23:56:13  brunner
 * Changes for new charm version
 *
 * Revision 1.9  1998/10/24 19:57:18  jim
 * Eliminated warnings generated by g++ -Wall.
 *
 * Revision 1.8  1998/06/18 14:44:33  jim
 * Eliminated warnings and errors from aCC.
 *
 * Revision 1.7  1998/03/03 23:13:46  brunner
 * Changing include files for new charm++ includes
 *
 * Revision 1.6  1998/02/10 23:43:03  milind
 * Fixed to reflect changes to Charm++ translator.
 *
 * Revision 1.5  1997/12/26 23:10:39  milind
 * Made namd2 to compile, link and run under linux. Merged Templates and src
 * directoriies, and removed separate definition and declaration files for
 * templates.
 *
 * Revision 1.4  1997/11/07 20:17:33  milind
 * Made NAMD to run on shared memory machines.
 *
 * Revision 1.3  1997/09/28 10:19:01  milind
 * Fixed priorities, ReductionMgr etc.
 *
 * Revision 1.2  1997/04/04 23:34:12  milind
 * Got NAMD2 to run on Origin2000.
 * Included definitions of class static variables in C files.
 * Fixed alignment bugs by using memcpy instead of assignment in
 * pack and unpack.
 *
 * Revision 1.1  1997/03/19 11:53:54  ari
 * Add Broadcast mechanism.
 * Fixed RCS Log entries on files that did not have Log entries.
 * Added some register variables to Molecule and ComputeNonbondedExcl.C
 *
 *
 ***************************************************************************/
