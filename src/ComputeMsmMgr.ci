/**
***  Copyright (c) 1995, 1996, 1997, 1998, 1999, 2000 by
***  The Board of Trustees of the University of Illinois.
***  All rights reserved.
**/

module ComputeMsmMgr {

  message MsmCoordMsg {
    ComputeMsmAtom coord[];
  };
/*
  message MsmSerialForceMsg {
    MsmSerialForce force[];
  };
*/

  group ComputeMsmMgr {

    entry ComputeMsmMgr(void);
    entry void initialize(CkQdMsg *);
    entry void initWorkers(CkQdMsg *);
    entry void startWorkers(CkQdMsg *);

    //entry void recvCoord(MsmSerialCoordMsg *);
    //entry void recvForce(MsmSerialForceMsg *);

    entry void recvMsmData(const MsmData &);

    entry [threaded] void anterpolate(MsmCoordMsg *);
    entry [threaded] void interpolate(CkQdMsg *);
  };

  array [1D] MsmLevel {
    entry MsmLevel(MsmGrid &qh, MsmGrid &eh, MsmGrid &q2h, MsmGrid &e2h);
    entry MsmLevel(MsmGrid &qh, MsmGrid &eh);  // for top level
    entry [threaded] void compute();
  };

  array [3D] MsmGridCutoff {
    entry MsmGridCutoff(int level, MsmGrid &qh, MsmGrid &eh);
    entry [threaded] void compute();
  };

  array [3D] MsmRestriction {
    entry MsmRestriction(int level, MsmGrid &qh, MsmGrid &q2h);
    entry [threaded] void compute();
  };

  array [3D] MsmProlongation {
    entry MsmProlongation(int level, MsmGrid &eh, MsmGrid &e2h);
    entry [threaded] void compute();
  };

  array [1D] MsmEnergy {
    entry MsmEnergy(MsmGrid &qh, MsmGrid &eh);
    entry [threaded] void compute();
  };

  group MSA_CacheGroup<float, DefaultEntry<float>,
        MSA_DEFAULT_ENTRIES_PER_PAGE>;

  array [1D] MSA_PageArray<float, DefaultEntry<float>,
        MSA_DEFAULT_ENTRIES_PER_PAGE>;

};

